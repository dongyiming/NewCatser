package com.example.uc_common_bean.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.uc_common_bean.vo.SongInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_INFO".
*/
public class SongInfoDao extends AbstractDao<SongInfo, Long> {

    public static final String TABLENAME = "SONG_INFO";

    /**
     * Properties of entity SongInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SongName = new Property(1, String.class, "songName", false, "SONG_NAME");
        public final static Property SongId = new Property(2, Integer.class, "songId", false, "SONG_ID");
        public final static Property SongDesc = new Property(3, String.class, "songDesc", false, "SONG_DESC");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property MenuCode = new Property(5, Integer.class, "menuCode", false, "MENU_CODE");
        public final static Property MenuName = new Property(6, String.class, "menuName", false, "MENU_NAME");
        public final static Property SingerCode = new Property(7, Integer.class, "singerCode", false, "SINGER_CODE");
        public final static Property SingerName = new Property(8, String.class, "singerName", false, "SINGER_NAME");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(10, String.class, "updateTime", false, "UPDATE_TIME");
    };


    public SongInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SongInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SONG_NAME\" TEXT," + // 1: songName
                "\"SONG_ID\" INTEGER," + // 2: songId
                "\"SONG_DESC\" TEXT," + // 3: songDesc
                "\"COVER\" TEXT," + // 4: cover
                "\"MENU_CODE\" INTEGER," + // 5: menuCode
                "\"MENU_NAME\" TEXT," + // 6: menuName
                "\"SINGER_CODE\" INTEGER," + // 7: singerCode
                "\"SINGER_NAME\" TEXT," + // 8: singerName
                "\"CREATE_TIME\" TEXT," + // 9: createTime
                "\"UPDATE_TIME\" TEXT);"); // 10: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        Integer songId = entity.getSongId();
        if (songId != null) {
            stmt.bindLong(3, songId);
        }
 
        String songDesc = entity.getSongDesc();
        if (songDesc != null) {
            stmt.bindString(4, songDesc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        Integer menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindLong(6, menuCode);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(7, menuName);
        }
 
        Integer singerCode = entity.getSingerCode();
        if (singerCode != null) {
            stmt.bindLong(8, singerCode);
        }
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(9, singerName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        Integer songId = entity.getSongId();
        if (songId != null) {
            stmt.bindLong(3, songId);
        }
 
        String songDesc = entity.getSongDesc();
        if (songDesc != null) {
            stmt.bindString(4, songDesc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        Integer menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindLong(6, menuCode);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(7, menuName);
        }
 
        Integer singerCode = entity.getSingerCode();
        if (singerCode != null) {
            stmt.bindLong(8, singerCode);
        }
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(9, singerName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SongInfo readEntity(Cursor cursor, int offset) {
        SongInfo entity = new SongInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // songId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // songDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // menuCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // menuName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // singerCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // singerName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSongDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMenuCode(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMenuName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSingerCode(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSingerName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SongInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SongInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
