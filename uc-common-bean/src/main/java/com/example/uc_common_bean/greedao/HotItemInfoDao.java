package com.example.uc_common_bean.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.uc_common_bean.vo.HotItemInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOT_ITEM_INFO".
*/
public class HotItemInfoDao extends AbstractDao<HotItemInfo, Long> {

    public static final String TABLENAME = "HOT_ITEM_INFO";

    /**
     * Properties of entity HotItemInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataType = new Property(1, String.class, "dataType", false, "DATA_TYPE");
        public final static Property ActionUrl = new Property(2, String.class, "actionUrl", false, "ACTION_URL");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property AuthorDesc = new Property(4, String.class, "authorDesc", false, "AUTHOR_DESC");
        public final static Property AuthorIcon = new Property(5, String.class, "authorIcon", false, "AUTHOR_ICON");
        public final static Property AuthorName = new Property(6, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Data = new Property(8, double.class, "data", false, "DATA");
        public final static Property Duration = new Property(9, double.class, "duration", false, "DURATION");
        public final static Property DateId = new Property(10, double.class, "dateId", false, "DATE_ID");
        public final static Property PlayUrl = new Property(11, String.class, "playUrl", false, "PLAY_URL");
        public final static Property Title = new Property(12, String.class, "title", false, "TITLE");
        public final static Property Category = new Property(13, String.class, "category", false, "CATEGORY");
        public final static Property CollectionCount = new Property(14, double.class, "collectionCount", false, "COLLECTION_COUNT");
        public final static Property ReplyCount = new Property(15, double.class, "replyCount", false, "REPLY_COUNT");
        public final static Property ShareCount = new Property(16, double.class, "shareCount", false, "SHARE_COUNT");
        public final static Property Blurred = new Property(17, String.class, "blurred", false, "BLURRED");
        public final static Property Detail = new Property(18, String.class, "detail", false, "DETAIL");
        public final static Property Feed = new Property(19, String.class, "feed", false, "FEED");
        public final static Property ForWeibo = new Property(20, String.class, "forWeibo", false, "FOR_WEIBO");
        public final static Property Raw = new Property(21, String.class, "raw", false, "RAW");
        public final static Property SdHeight = new Property(22, double.class, "sdHeight", false, "SD_HEIGHT");
        public final static Property SdWidth = new Property(23, double.class, "sdWidth", false, "SD_WIDTH");
        public final static Property SdName = new Property(24, String.class, "sdName", false, "SD_NAME");
        public final static Property SdUrl = new Property(25, String.class, "sdUrl", false, "SD_URL");
        public final static Property HdHeight = new Property(26, double.class, "hdHeight", false, "HD_HEIGHT");
        public final static Property HdWidth = new Property(27, double.class, "hdWidth", false, "HD_WIDTH");
        public final static Property HdName = new Property(28, String.class, "hdName", false, "HD_NAME");
        public final static Property HdUrl = new Property(29, String.class, "hdUrl", false, "HD_URL");
    };


    public HotItemInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HotItemInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOT_ITEM_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA_TYPE\" TEXT," + // 1: dataType
                "\"ACTION_URL\" TEXT," + // 2: actionUrl
                "\"IMAGE\" TEXT," + // 3: image
                "\"AUTHOR_DESC\" TEXT," + // 4: authorDesc
                "\"AUTHOR_ICON\" TEXT," + // 5: authorIcon
                "\"AUTHOR_NAME\" TEXT," + // 6: authorName
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"DATA\" REAL NOT NULL ," + // 8: data
                "\"DURATION\" REAL NOT NULL ," + // 9: duration
                "\"DATE_ID\" REAL NOT NULL ," + // 10: dateId
                "\"PLAY_URL\" TEXT," + // 11: playUrl
                "\"TITLE\" TEXT," + // 12: title
                "\"CATEGORY\" TEXT," + // 13: category
                "\"COLLECTION_COUNT\" REAL NOT NULL ," + // 14: collectionCount
                "\"REPLY_COUNT\" REAL NOT NULL ," + // 15: replyCount
                "\"SHARE_COUNT\" REAL NOT NULL ," + // 16: shareCount
                "\"BLURRED\" TEXT," + // 17: blurred
                "\"DETAIL\" TEXT," + // 18: detail
                "\"FEED\" TEXT," + // 19: feed
                "\"FOR_WEIBO\" TEXT," + // 20: forWeibo
                "\"RAW\" TEXT," + // 21: raw
                "\"SD_HEIGHT\" REAL NOT NULL ," + // 22: sdHeight
                "\"SD_WIDTH\" REAL NOT NULL ," + // 23: sdWidth
                "\"SD_NAME\" TEXT," + // 24: sdName
                "\"SD_URL\" TEXT," + // 25: sdUrl
                "\"HD_HEIGHT\" REAL NOT NULL ," + // 26: hdHeight
                "\"HD_WIDTH\" REAL NOT NULL ," + // 27: hdWidth
                "\"HD_NAME\" TEXT," + // 28: hdName
                "\"HD_URL\" TEXT);"); // 29: hdUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOT_ITEM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HotItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindString(2, dataType);
        }
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(3, actionUrl);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(5, authorDesc);
        }
 
        String authorIcon = entity.getAuthorIcon();
        if (authorIcon != null) {
            stmt.bindString(6, authorIcon);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(7, authorName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
        stmt.bindDouble(9, entity.getData());
        stmt.bindDouble(10, entity.getDuration());
        stmt.bindDouble(11, entity.getDateId());
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(12, playUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(13, title);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(14, category);
        }
        stmt.bindDouble(15, entity.getCollectionCount());
        stmt.bindDouble(16, entity.getReplyCount());
        stmt.bindDouble(17, entity.getShareCount());
 
        String blurred = entity.getBlurred();
        if (blurred != null) {
            stmt.bindString(18, blurred);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(19, detail);
        }
 
        String feed = entity.getFeed();
        if (feed != null) {
            stmt.bindString(20, feed);
        }
 
        String forWeibo = entity.getForWeibo();
        if (forWeibo != null) {
            stmt.bindString(21, forWeibo);
        }
 
        String raw = entity.getRaw();
        if (raw != null) {
            stmt.bindString(22, raw);
        }
        stmt.bindDouble(23, entity.getSdHeight());
        stmt.bindDouble(24, entity.getSdWidth());
 
        String sdName = entity.getSdName();
        if (sdName != null) {
            stmt.bindString(25, sdName);
        }
 
        String sdUrl = entity.getSdUrl();
        if (sdUrl != null) {
            stmt.bindString(26, sdUrl);
        }
        stmt.bindDouble(27, entity.getHdHeight());
        stmt.bindDouble(28, entity.getHdWidth());
 
        String hdName = entity.getHdName();
        if (hdName != null) {
            stmt.bindString(29, hdName);
        }
 
        String hdUrl = entity.getHdUrl();
        if (hdUrl != null) {
            stmt.bindString(30, hdUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HotItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindString(2, dataType);
        }
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(3, actionUrl);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(5, authorDesc);
        }
 
        String authorIcon = entity.getAuthorIcon();
        if (authorIcon != null) {
            stmt.bindString(6, authorIcon);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(7, authorName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
        stmt.bindDouble(9, entity.getData());
        stmt.bindDouble(10, entity.getDuration());
        stmt.bindDouble(11, entity.getDateId());
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(12, playUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(13, title);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(14, category);
        }
        stmt.bindDouble(15, entity.getCollectionCount());
        stmt.bindDouble(16, entity.getReplyCount());
        stmt.bindDouble(17, entity.getShareCount());
 
        String blurred = entity.getBlurred();
        if (blurred != null) {
            stmt.bindString(18, blurred);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(19, detail);
        }
 
        String feed = entity.getFeed();
        if (feed != null) {
            stmt.bindString(20, feed);
        }
 
        String forWeibo = entity.getForWeibo();
        if (forWeibo != null) {
            stmt.bindString(21, forWeibo);
        }
 
        String raw = entity.getRaw();
        if (raw != null) {
            stmt.bindString(22, raw);
        }
        stmt.bindDouble(23, entity.getSdHeight());
        stmt.bindDouble(24, entity.getSdWidth());
 
        String sdName = entity.getSdName();
        if (sdName != null) {
            stmt.bindString(25, sdName);
        }
 
        String sdUrl = entity.getSdUrl();
        if (sdUrl != null) {
            stmt.bindString(26, sdUrl);
        }
        stmt.bindDouble(27, entity.getHdHeight());
        stmt.bindDouble(28, entity.getHdWidth());
 
        String hdName = entity.getHdName();
        if (hdName != null) {
            stmt.bindString(29, hdName);
        }
 
        String hdUrl = entity.getHdUrl();
        if (hdUrl != null) {
            stmt.bindString(30, hdUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HotItemInfo readEntity(Cursor cursor, int offset) {
        HotItemInfo entity = new HotItemInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actionUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // authorDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // authorIcon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // authorName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.getDouble(offset + 8), // data
            cursor.getDouble(offset + 9), // duration
            cursor.getDouble(offset + 10), // dateId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // playUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // title
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // category
            cursor.getDouble(offset + 14), // collectionCount
            cursor.getDouble(offset + 15), // replyCount
            cursor.getDouble(offset + 16), // shareCount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // blurred
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // detail
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // feed
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // forWeibo
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // raw
            cursor.getDouble(offset + 22), // sdHeight
            cursor.getDouble(offset + 23), // sdWidth
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // sdName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // sdUrl
            cursor.getDouble(offset + 26), // hdHeight
            cursor.getDouble(offset + 27), // hdWidth
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // hdName
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // hdUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HotItemInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActionUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthorDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthorIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthorName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setData(cursor.getDouble(offset + 8));
        entity.setDuration(cursor.getDouble(offset + 9));
        entity.setDateId(cursor.getDouble(offset + 10));
        entity.setPlayUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTitle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCategory(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCollectionCount(cursor.getDouble(offset + 14));
        entity.setReplyCount(cursor.getDouble(offset + 15));
        entity.setShareCount(cursor.getDouble(offset + 16));
        entity.setBlurred(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDetail(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFeed(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setForWeibo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRaw(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSdHeight(cursor.getDouble(offset + 22));
        entity.setSdWidth(cursor.getDouble(offset + 23));
        entity.setSdName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSdUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHdHeight(cursor.getDouble(offset + 26));
        entity.setHdWidth(cursor.getDouble(offset + 27));
        entity.setHdName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHdUrl(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HotItemInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HotItemInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
