package com.example.uc_common_bean.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.uc_common_bean.vo.MenuSong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_SONG".
*/
public class MenuSongDao extends AbstractDao<MenuSong, Long> {

    public static final String TABLENAME = "MENU_SONG";

    /**
     * Properties of entity MenuSong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SongCode = new Property(1, Integer.class, "songCode", false, "SONG_CODE");
        public final static Property MenuCode = new Property(2, Integer.class, "menuCode", false, "MENU_CODE");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(4, String.class, "updateTime", false, "UPDATE_TIME");
    };


    public MenuSongDao(DaoConfig config) {
        super(config);
    }
    
    public MenuSongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SONG_CODE\" INTEGER," + // 1: songCode
                "\"MENU_CODE\" INTEGER," + // 2: menuCode
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"UPDATE_TIME\" TEXT);"); // 4: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuSong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer songCode = entity.getSongCode();
        if (songCode != null) {
            stmt.bindLong(2, songCode);
        }
 
        Integer menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindLong(3, menuCode);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuSong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer songCode = entity.getSongCode();
        if (songCode != null) {
            stmt.bindLong(2, songCode);
        }
 
        Integer menuCode = entity.getMenuCode();
        if (menuCode != null) {
            stmt.bindLong(3, menuCode);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MenuSong readEntity(Cursor cursor, int offset) {
        MenuSong entity = new MenuSong( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // songCode
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // menuCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuSong entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongCode(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMenuCode(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MenuSong entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MenuSong entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
